{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { delay, put, all, takeLatest, fork } from \"redux-saga/effects\";\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var _id;\n\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          // const result =  yield call(addPostAPI, action.data);\n          _id = shortId.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: _id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: _id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"]('/api/post', data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(id, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPost)]);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}","map":{"version":3,"sources":["C:/Users/애드트라이브/Desktop/react-nodebird-re/prepare/front/sagas/post.js"],"names":["addPost","removePost","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga","delay","put","all","takeLatest","fork","shortId","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","action","id","generate","type","content","error","response","removePostAPI","addCommentAPI","loadPost"],"mappings":"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","sourcesContent":["import { delay, put, all, takeLatest, fork } from \"redux-saga/effects\";\r\nimport shortId from 'shortid';\r\nimport axios from 'axios';\r\nimport { \r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI (data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result =  yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data\r\n            }\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI (data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result =  yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI (data) {\r\n    return axios.post(`/api/post/${id}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result =  yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n    // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000); => 2초동안에는 ADD_POST_REQUEST 액션을 한번만 감지한다\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\r\n    // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000); => 2초동안에는 ADD_POST_REQUEST 액션을 한번만 감지한다\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}