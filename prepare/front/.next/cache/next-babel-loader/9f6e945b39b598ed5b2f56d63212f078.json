{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchPostComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { delay, put, all, takeLatest, fork } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(id, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchPost() {\n  return _regeneratorRuntime.wrap(function watchPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchPostComment() {\n  return _regeneratorRuntime.wrap(function watchPostComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchPost), fork(watchPostComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/서진웅/OneDrive/바탕 화면/react-nodebird-lecture-re/prepare/front/sagas/post.js"],"names":["addPost","addComment","watchPost","watchPostComment","postSaga","delay","put","all","takeLatest","fork","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostAPI","data","post","action","type","result","response","addCommentAPI","id"],"mappings":";;oDAWUA,O;qDAoBAC,U;qDAiBAC,S;qDAKAC,gB;qDAIeC,Q;;AAzDzB,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,UAA1B,EAAsCC,IAAtC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,gBADJ,EACsBC,gBADtB,EACwCC,gBADxC,EAEIC,mBAFJ,EAEyBC,mBAFzB,EAE8CC,mBAF9C,QAGO,kBAHP;;AAKA,SAASC,UAAT,CAAqBC,IAArB,EAA2B;AACvB,SAAOR,KAAK,CAACS,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,SAAUlB,OAAV,CAAkBoB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMf,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAET,gBADA;AAENM,YAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMZ,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAER,gBADA;AAENK,YAAAA,IAAI,EAAE,YAAIK,QAAJ,CAAaL;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASM,aAAT,CAAwBN,IAAxB,EAA8B;AAC1B,SAAOR,KAAK,CAACS,IAAN,qBAAwBM,EAAxB,eAAsCP,IAAtC,CAAP;AACH;;AAED,SAAUjB,UAAV,CAAqBmB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMf,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAET,gBADA;AAENM,YAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMZ,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAER,gBADA;AAENK,YAAAA,IAAI,EAAE,aAAIK,QAAJ,CAAaL;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUhB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACG,gBAAD,EAAmBX,OAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUG,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACM,mBAAD,EAAsBb,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMG,GAAG,CAAC,CACNE,IAAI,CAACP,SAAD,CADE,EAENO,IAAI,CAACN,gBAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { delay, put, all, takeLatest, fork } from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport { \r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE\r\n} from '../reducers/post';\r\n\r\nfunction addPostAPI (data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result =  yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI (data) {\r\n    return axios.post(`/api/post/${id}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result =  yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n    // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000); => 2초동안에는 ADD_POST_REQUEST 액션을 한번만 감지한다\r\n}\r\n\r\nfunction* watchPostComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchPost),\r\n        fork(watchPostComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}