{"ast":null,"code":"import { delay, put, all, takeLatest, fork, throttle } from \"redux-saga/effects\";\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000); // const result =  yield call(loadPostsAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); // const result =  yield call(addPostAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result =  yield call(removePostAPI, action.data);\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${id}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result =  yield call(addCommentAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000); => 2초동안에는 ADD_POST_REQUEST 액션을 한번만 감지한다\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts); // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000); => 2초동안에는 ADD_POST_REQUEST 액션을 한번만 감지한다\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["C:/Users/애드트라이브/Desktop/react-nodebird-re/prepare/front/sagas/post.js"],"names":["delay","put","all","takeLatest","fork","throttle","shortId","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","id","generate","type","err","error","response","addPostAPI","post","addPost","content","removePostAPI","delete","removePost","addCommentAPI","addComment","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { delay, put, all, takeLatest, fork, throttle } from \"redux-saga/effects\";\r\nimport shortId from 'shortid';\r\nimport axios from 'axios';\r\nimport { \r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n    generateDummyPost\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostsAPI (data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result =  yield call(loadPostsAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost(10)\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI (data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result =  yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data\r\n            }\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI (data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result =  yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI (data) {\r\n    return axios.post(`/api/post/${id}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result =  yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n    // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000); => 2초동안에는 ADD_POST_REQUEST 액션을 한번만 감지한다\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\r\n    // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000); => 2초동안에는 ADD_POST_REQUEST 액션을 한번만 감지한다\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}