{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://picsum.photos/200/300'\n    }, {\n      id: shortId.generate(),\n      src: 'https://picsum.photos/id/237/200/300'\n    }, {\n      id: shortId.generate(),\n      src: 'https://picsum.photos/seed/picsum/200/300'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요!'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.avatar()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})));\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  }\n}); // 복습 ! 리듀서란, 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId); \n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [ dummyComment(action.data.content), ...post.Comments ];\n          // const mainPosts = [ ...state.mainPosts ];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true\n          // }; => immer를 안쓰고 불변성 유지하기, 너무 복잡하다!\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/애드트라이브/Desktop/react-nodebird-re/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","name","findName","lorem","paragraph","image","avatar","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: '제로초'\r\n        },\r\n        content: '첫번째 게시글 #해시태그 #익스프레스',\r\n        Images: [{\r\n            id: shortId.generate(),\r\n            src: 'https://picsum.photos/200/300'\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://picsum.photos/id/237/200/300'\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://picsum.photos/seed/picsum/200/300'\r\n        }],\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'nero'\r\n            },\r\n            content: '우와 개정판이 나왔군요!'\r\n        }, {\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'hero'\r\n            },\r\n            content: '얼른 사고싶어요~'\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n};\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n    Array(20).fill().map(() => ({\r\n        id: shortId.generate(),\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName()\r\n        },\r\n        content: faker.lorem.paragraph(),\r\n        Images: [{\r\n            src: faker.image.avatar()\r\n        }],\r\n        Comments: [{\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: faker.name.findName()\r\n            },\r\n            content: faker.lorem.sentence()\r\n        }],\r\n    }))\r\n)\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초'\r\n    },\r\n    Images: [],\r\n    Comments: []\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초'\r\n    },\r\n})\r\n\r\n// 복습 ! 리듀서란, 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                break;\r\n            case ADD_POST_FAILURE: \r\n                draft.addPostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                break;\r\n            case REMOVE_POST_FAILURE: \r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n                \r\n            case ADD_COMMENT_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId); \r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // post.Comments = [ dummyComment(action.data.content), ...post.Comments ];\r\n                // const mainPosts = [ ...state.mainPosts ];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading: false,\r\n                //     addCommentDone: true\r\n                // }; => immer를 안쓰고 불변성 유지하기, 너무 복잡하다!\r\n            }\r\n            case ADD_COMMENT_FAILURE: \r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}