{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC560\\uB4DC\\uD2B8\\uB77C\\uC774\\uBE0C\\\\Desktop\\\\react-nodebird-re\\\\prepare\\\\front\\\\components\\\\PostCard.js\";\nimport { useState, useCallback } from 'react';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { HeartTwoTone, HeartOutlined, RetweetOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport PostImages from '../components/PostImages';\nimport CommentForm from '../components/CommentForm';\nimport PostCardContent from '../components/PostCardContent';\nimport FollowButton from '../components/FollowButton';\nimport { REMOVE_POST_REQUEST } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const id = me && me.id; // const id = me?.id; 위와 같음 . 새로운 문법 => 옵셔널 체이닝\n  //  위의 두줄을 이렇게도 가능 (옵셔널 체이닝을 통해서)\n  // const id = useSelector((state) => state.user.me?.id);\n\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const onToggleLike = useCallback(() => {\n    setLiked(prev => !prev);\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 42\n      }, this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        towToneColor: \"#eb2f96\",\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this)],\n      extra: /*#__PURE__*/_jsxDEV(FollowButton, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 24\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }, this),\n        title: post.User.nickname,\n        description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n          postData: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), commentFormOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        header: `${post.Comments.length}개의 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n              children: item.User.nickname[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 45\n            }, this),\n            content: item.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    // 객체들의 배열이라는 의미\n    Images: PropTypes.arrayOf(PropTypes.object) // 객체들의 배열이라는 의미\n\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/애드트라이브/Desktop/react-nodebird-re/prepare/front/components/PostCard.js"],"names":["useState","useCallback","Button","Card","Popover","Avatar","List","Comment","useSelector","useDispatch","PropTypes","HeartTwoTone","HeartOutlined","RetweetOutlined","MessageOutlined","EllipsisOutlined","PostImages","CommentForm","PostCardContent","FollowButton","REMOVE_POST_REQUEST","PostCard","post","dispatch","me","state","user","removePostLoading","id","liked","setLiked","commentFormOpened","setCommentFormOpened","onToggleLike","prev","onToggleComment","onRemovePost","type","data","marginBottom","Images","User","nickname","content","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { HeartTwoTone, HeartOutlined, RetweetOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\r\nimport PostImages from '../components/PostImages';\r\nimport CommentForm from '../components/CommentForm';\r\nimport PostCardContent from '../components/PostCardContent';\r\nimport FollowButton from '../components/FollowButton';\r\nimport { REMOVE_POST_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { me } = useSelector((state) => state.user);\r\n    const { removePostLoading } = useSelector((state) => state.post);\r\n    const id = me && me.id;\r\n    // const id = me?.id; 위와 같음 . 새로운 문법 => 옵셔널 체이닝\r\n    //  위의 두줄을 이렇게도 가능 (옵셔널 체이닝을 통해서)\r\n    // const id = useSelector((state) => state.user.me?.id);\r\n\r\n    const [liked, setLiked] = useState(false);\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const onToggleLike = useCallback(() => {\r\n        setLiked((prev) => !prev);\r\n    }, []);\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, []);\r\n\r\n    const onRemovePost = useCallback(() => {\r\n        dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id,\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ marginBottom: '20px' }}>\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images}/>}\r\n                actions={[\r\n                    <RetweetOutlined key=\"retweet\"/>,\r\n                    liked \r\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike}/>\r\n                        : <HeartOutlined towToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike}/>,\r\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment}/>,\r\n                    <Popover key=\"more\" content={(\r\n                        <Button.Group>\r\n                            {id && post.User.id === id ? (\r\n                                <>\r\n                                    <Button>수정</Button>\r\n                                    <Button type='danger' loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                                </>\r\n                            ) : (<Button>신고</Button>)}\r\n                        </Button.Group>\r\n                    )}>\r\n                        <EllipsisOutlined />\r\n                    </Popover>\r\n                ]}\r\n                extra={<FollowButton post={post}/>}\r\n            >\r\n                <Card.Meta \r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    title={post.User.nickname}\r\n                    description={<PostCardContent postData={post.content}/>}\r\n                />\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <div>\r\n                    <CommentForm post={post}/>\r\n                    <List \r\n                        header={`${post.Comments.length}개의 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment \r\n                                    author={item.User.nickname}\r\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n};\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n        Comments: PropTypes.arrayOf(PropTypes.object), // 객체들의 배열이라는 의미\r\n        Images: PropTypes.arrayOf(PropTypes.object) // 객체들의 배열이라는 의미\r\n    }).isRequired\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}