{"ast":null,"code":"import { delay, put, all, takeLatest, fork } from \"redux-saga/effects\";\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); // const result =  yield call(addPostAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result =  yield call(removePostAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${id}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result =  yield call(addCommentAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000); => 2초동안에는 ADD_POST_REQUEST 액션을 한번만 감지한다\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000); => 2초동안에는 ADD_POST_REQUEST 액션을 한번만 감지한다\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["C:/Users/서진웅/OneDrive/바탕 화면/react-nodebird-lecture-re/prepare/front/sagas/post.js"],"names":["delay","put","all","takeLatest","fork","shortId","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","error","response","removePostAPI","delete","removePost","REMOVE_POST_OF_ME","addCommentAPI","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,UAA1B,EAAsCC,IAAtC,QAAkD,oBAAlD;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,gBADJ,EACsBC,gBADtB,EACwCC,gBADxC,EAEIC,mBAFJ,EAEyBC,mBAFzB,EAE8CC,mBAF9C,EAGIC,mBAHJ,EAGyBC,mBAHzB,EAG8CC,mBAH9C,QAIO,kBAJP;AAKA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,UAAT,CAAqBC,IAArB,EAA2B;AACvB,SAAOZ,KAAK,CAACa,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMrB,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMsB,EAAE,GAAGjB,OAAO,CAACkB,QAAR,EAAX;AACA,UAAMtB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEhB,gBADA;AAENU,MAAAA,IAAI,EAAE;AACFI,QAAAA,EADE;AAEFG,QAAAA,OAAO,EAAEJ,MAAM,CAACH;AAFd;AAFA,KAAD,CAAT;AAOA,UAAMjB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAER,cADA;AAENE,MAAAA,IAAI,EAAEI;AAFA,KAAD,CAAT;AAIH,GAfD,CAeE,OAAOI,GAAP,EAAY;AACV,UAAMzB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEf,gBADA;AAENkB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASW,aAAT,CAAwBX,IAAxB,EAA8B;AAC1B,SAAOZ,KAAK,CAACwB,MAAN,CAAa,WAAb,EAA0BZ,IAA1B,CAAP;AACH;;AAED,UAAUa,UAAV,CAAqBV,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMrB,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMsB,EAAE,GAAGjB,OAAO,CAACkB,QAAR,EAAX;AACA,UAAMtB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEV,mBADA;AAENI,MAAAA,IAAI,EAAE;AACFI,QAAAA,EADE;AAEFG,QAAAA,OAAO,EAAEJ,MAAM,CAACH;AAFd;AAFA,KAAD,CAAT;AAOA,UAAMjB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEQ,iBADA;AAENd,MAAAA,IAAI,EAAEI;AAFA,KAAD,CAAT;AAIH,GAfD,CAeE,OAAOI,GAAP,EAAY;AACV,UAAMzB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAET,mBADA;AAENY,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASe,aAAT,CAAwBf,IAAxB,EAA8B;AAC1B,SAAOZ,KAAK,CAACa,IAAN,CAAY,aAAYG,EAAG,UAA3B,EAAsCJ,IAAtC,CAAP;AACH;;AAED,UAAUgB,UAAV,CAAqBb,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMrB,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMC,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEb,mBADA;AAENO,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACV,UAAMzB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEZ,mBADA;AAENe,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUiB,YAAV,GAAyB;AACrB,QAAMhC,UAAU,CAACI,gBAAD,EAAmBa,OAAnB,CAAhB,CADqB,CAErB;AACH;;AAED,UAAUgB,eAAV,GAA4B;AACxB,QAAMjC,UAAU,CAACU,mBAAD,EAAsBkB,UAAtB,CAAhB,CADwB,CAExB;AACH;;AAED,UAAUM,eAAV,GAA4B;AACxB,QAAMlC,UAAU,CAACO,mBAAD,EAAsBwB,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAMpC,GAAG,CAAC,CACNE,IAAI,CAAC+B,YAAD,CADE,EAEN/B,IAAI,CAACiC,eAAD,CAFE,EAGNjC,IAAI,CAACgC,eAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { delay, put, all, takeLatest, fork } from \"redux-saga/effects\";\r\nimport shortId from 'shortid';\r\nimport axios from 'axios';\r\nimport { \r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI (data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result =  yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data\r\n            }\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI (data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result =  yield call(removePostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data\r\n            }\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: id\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI (data) {\r\n    return axios.post(`/api/post/${id}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result =  yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n    // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000); => 2초동안에는 ADD_POST_REQUEST 액션을 한번만 감지한다\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n    // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000); => 2초동안에는 ADD_POST_REQUEST 액션을 한번만 감지한다\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}