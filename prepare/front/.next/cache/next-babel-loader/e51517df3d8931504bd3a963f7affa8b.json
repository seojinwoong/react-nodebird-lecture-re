{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\n\nconst configureStore = () => {\n  const middlewares = [];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) // 배포용일때는 web에서 확인할수 있는 devtools를 연결하지 않는 코드\n  : composeWithDevTools(applyMiddleware([])); // 개발용일때는 web에서 확인할 수 있는 devtools를 연결하는 코드\n\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/서진웅/OneDrive/바탕 화면/react-nodebird-lecture-re/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","reducer","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,QAAQ,GAAG,QACfN,OAAO,CAACD,eAAe,CAAC,GAAGM,WAAJ,CAAhB,CADQ,CAC0B;AAD1B,IAEfH,mBAAmB,CAACH,eAAe,CAAC,EAAD,CAAhB,CAFrB,CAFyB,CAIkB;;AAC3C,QAAMQ,KAAK,GAAGN,WAAW,CAACE,OAAD,EAAUG,QAAV,CAAzB;AACA,SAAOC,KAAP;AACH,CAPD;;AASA,MAAMC,OAAO,GAAGV,aAAa,CAACM,cAAD,EAAiB;AAAEK,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport reducer from '../reducers';\r\n\r\nconst configureStore = () => {\r\n    const middlewares = [];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares)) // 배포용일때는 web에서 확인할수 있는 devtools를 연결하지 않는 코드\r\n    : composeWithDevTools(applyMiddleware([])) // 개발용일때는 web에서 확인할 수 있는 devtools를 연결하는 코드\r\n    const store = createStore(reducer, enhancer);\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development' });\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}